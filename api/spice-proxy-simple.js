export default async function handler(req, res) {
    // CORS headers - —Ä–∞–∑—Ä–µ—à–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—É –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');

    // Handle preflight requests
    if (req.method === 'OPTIONS') {
        res.status(200).end();
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ environment variables (–±–µ–∑–æ–ø–∞—Å–Ω–æ!)
    const API_KEY = process.env.SPICE_API_KEY;
    const BASE_URL = 'https://api.jetsetrdv.com';

    if (!API_KEY) {
        return res.status(500).json({ 
            error: 'API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ environment variables',
            instructions: '–î–æ–±–∞–≤—å—Ç–µ SPICE_API_KEY –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Vercel'
        });
    }

    try {
        // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        const { force_pays } = req.body || {};
        
        console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Spice API...');
        
        // –°—Ç—Ä–æ–∏–º URL —Å query parameters —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        let apiUrl = `${BASE_URL}/index_api/landing_module/profils_global`;
        const queryParams = new URLSearchParams();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π api_key –ø–∞—Ä–∞–º–µ—Ç—Ä (Required parameter —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
        queryParams.append('api_key', API_KEY);
        
        // –î–æ–±–∞–≤–ª—è–µ–º force_pays –∫–∞–∫ query parameter (—Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
        if (force_pays) {
            queryParams.append('force_pays', force_pays);
        }
        
        const finalUrl = `${apiUrl}?${queryParams.toString()}`;
        console.log('üì° URL –∑–∞–ø—Ä–æ—Å–∞:', finalUrl);
        
        // –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: Authorization: Basic API_KEY:PASSWORD –¥–ª—è index_api
        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã Basic –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–Ω–µ—Ç –ø–∞—Ä–æ–ª—è –≤ –¥–æ–∫–∞—Ö)
        const basicAuth1 = `Basic ${API_KEY}`;
        const basicAuth2 = `Basic ${API_KEY}:`;
        const basicAuth3 = `Basic ${Buffer.from(API_KEY + ':').toString('base64')}`;
        
        const headers = {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
            // –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è index_api
            'Authorization': basicAuth3  // –ü—Ä–æ–±—É–µ–º base64 encoded
        };
        
        console.log('üîë Authorization types tested:', {
            'basic1': `Basic ${API_KEY.substring(0, 4)}...`,
            'basic2': `Basic ${API_KEY.substring(0, 4)}...:`,
            'basic3': `Basic base64(${API_KEY.substring(0, 4)}...:)`,
            'using': 'basic3'
        });
        
        // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É API —Å API –∫–ª—é—á–æ–º –≤ headers
        const apiResponse = await fetch(finalUrl, {
            method: 'POST',
            headers: headers
        });

        console.log(`üì° API –æ—Ç–≤–µ—Ç–∏–ª —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: ${apiResponse.status}`);
        
        const data = await apiResponse.json();
        
        if (!apiResponse.ok) {
            console.error('‚ùå API Error:', data);
            return res.status(apiResponse.status).json({
                error: '–û—à–∏–±–∫–∞ Spice API',
                message: data.message || data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
                status: apiResponse.status,
                details: data
            });
        }

        console.log('‚úÖ API –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω!');
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        res.status(200).json({
            success: true,
            data: data,
            profiles: data.profils || data.profiles || [],
            total: data.profils?.length || data.profiles?.length || 0
        });

    } catch (error) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        res.status(500).json({ 
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API',
            message: error.message,
            type: 'server_error'
        });
    }
} 