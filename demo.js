/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è SpiceConnect
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ API
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * 1. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞
 * 2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: loadScript('demo.js')
 * 3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ demo.* –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */

const SpiceConnectDemo = {
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    demoUsers: [
        {
            id: '1',
            name: '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞',
            age: 28,
            city: '–ú–æ—Å–∫–≤–∞',
            gender: 2,
            description: '–õ—é–±–ª—é –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å, —á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥–∏ –∏ –≥–æ—Ç–æ–≤–∏—Ç—å. –ò—â—É —Å–µ—Ä—å–µ–∑–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è.',
            photos: ['photo1.jpg'],
            online: true,
            lastSeen: new Date()
        },
        {
            id: '2',
            name: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞',
            age: 24,
            city: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
            gender: 2,
            description: '–§–æ—Ç–æ–≥—Ä–∞—Ñ –∏ –ª—é–±–∏—Ç–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞. –ó–∞–Ω–∏–º–∞—é—Å—å –π–æ–≥–æ–π –∏ —Ç–∞–Ω—Ü–∞–º–∏.',
            photos: ['photo2.jpg'],
            online: false,
            lastSeen: new Date(Date.now() - 3600000) // 1 —á–∞—Å –Ω–∞–∑–∞–¥
        },
        {
            id: '3',
            name: '–ï–ª–µ–Ω–∞ –ö—É–∑–Ω–µ—Ü–æ–≤–∞',
            age: 30,
            city: '–ú–æ—Å–∫–≤–∞',
            gender: 2,
            description: '–í—Ä–∞—á –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, –ª—é–±–ª—é –∫–∏–Ω–æ –∏ —Ç–µ–∞—Ç—Ä. –ò—â—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.',
            photos: ['photo3.jpg'],
            online: true,
            lastSeen: new Date()
        },
        {
            id: '4',
            name: '–î–º–∏—Ç—Ä–∏–π –ò–≤–∞–Ω–æ–≤',
            age: 32,
            city: '–ú–æ—Å–∫–≤–∞',
            gender: 1,
            description: 'IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, —É–≤–ª–µ–∫–∞—é—Å—å —Å–ø–æ—Ä—Ç–æ–º –∏ –º—É–∑—ã–∫–æ–π. –•–æ—á—É –Ω–∞–π—Ç–∏ —Å–ø—É—Ç–Ω–∏—Ü—É –∂–∏–∑–Ω–∏.',
            photos: ['photo4.jpg'],
            online: false,
            lastSeen: new Date(Date.now() - 7200000) // 2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
        }
    ],

    demoMessages: [
        {
            id: '1',
            from: '2',
            to: '1',
            text: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?',
            timestamp: new Date(Date.now() - 3600000),
            read: true
        },
        {
            id: '2',
            from: '1',
            to: '2',
            text: '–ü—Ä–∏–≤–µ—Ç! –í—Å–µ –æ—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ! –ê —É —Ç–µ–±—è –∫–∞–∫?',
            timestamp: new Date(Date.now() - 3400000),
            read: true
        },
        {
            id: '3',
            from: '2',
            to: '1',
            text: '–¢–æ–∂–µ —Ö–æ—Ä–æ—à–æ! –ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ?',
            timestamp: new Date(Date.now() - 3200000),
            read: false
        }
    ],

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ API
    async login(email = 'demo@example.com', password = 'demo123') {
        console.log('üîê –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        console.log(`Email: ${email}`);
        console.log(`Password: ${password}`);
        
        // –ò–º–∏—Ç–∞—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–∞
        const response = await this.simulateAPICall('login', {
            email,
            password
        });
        
        console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
        
        if (response.success) {
            localStorage.setItem('demo_token', response.token);
            console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
            return response;
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
            return null;
        }
    },

    async register(userData = {}) {
        console.log('üë§ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
        
        const defaultData = {
            email: 'newuser@example.com',
            password: 'newpass123',
            age: 25,
            city: '–ú–æ—Å–∫–≤–∞',
            gender: 2,
            name: '–ù–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        };
        
        const data = { ...defaultData, ...userData };
        console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', data);
        
        const response = await this.simulateAPICall('register', data);
        console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
        
        if (response.success) {
            console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
            return response;
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
            return null;
        }
    },

    async searchUsers(filters = {}) {
        console.log('üîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        
        const defaultFilters = {
            age_min: 18,
            age_max: 35,
            gender: '',
            city: '–ú–æ—Å–∫–≤–∞'
        };
        
        const searchFilters = { ...defaultFilters, ...filters };
        console.log('–§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:', searchFilters);
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        let results = this.demoUsers.filter(user => {
            let matches = true;
            
            if (searchFilters.age_min && user.age < searchFilters.age_min) matches = false;
            if (searchFilters.age_max && user.age > searchFilters.age_max) matches = false;
            if (searchFilters.gender && user.gender !== parseInt(searchFilters.gender)) matches = false;
            if (searchFilters.city && user.city !== searchFilters.city) matches = false;
            
            return matches;
        });
        
        console.log(`–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${results.length}`);
        console.table(results);
        
        return {
            success: true,
            users: results,
            total: results.length
        };
    },

    async loadMessages(userId = '2') {
        console.log('üí¨ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π');
        console.log(`–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ID: ${userId}`);
        
        const messages = this.demoMessages.filter(msg => 
            (msg.from === userId || msg.to === userId)
        );
        
        console.log(`–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${messages.length}`);
        console.table(messages);
        
        return {
            success: true,
            messages: messages.map(msg => ({
                ...msg,
                own: msg.from === '1' // –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            }))
        };
    },

    async sendMessage(userId, messageText) {
        console.log('üì§ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
        console.log(`–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${userId}`);
        console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ: ${messageText}`);
        
        const newMessage = {
            id: Date.now().toString(),
            from: '1', // –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            to: userId,
            text: messageText,
            timestamp: new Date(),
            read: false
        };
        
        this.demoMessages.push(newMessage);
        
        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
        console.log('–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', newMessage);
        
        return {
            success: true,
            message: newMessage
        };
    },

    async updateProfile(profileData = {}) {
        console.log('‚úèÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è');
        
        const defaultProfile = {
            name: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∏–º—è',
            age: 26,
            city: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
            description: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è'
        };
        
        const data = { ...defaultProfile, ...profileData };
        console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', data);
        
        const response = await this.simulateAPICall('updateProfile', data);
        console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
        
        if (response.success) {
            console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!');
            return response;
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è');
            return null;
        }
    },

    async uploadPhoto(file) {
        console.log('üì∏ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏');
        
        if (!file) {
            console.log('–°–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª...');
            file = new File(['demo content'], 'demo.jpg', { type: 'image/jpeg' });
        }
        
        console.log('–§–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:', {
            name: file.name,
            size: file.size,
            type: file.type
        });
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        console.log('–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...');
        await this.delay(2000);
        
        console.log('‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞!');
        
        return {
            success: true,
            photo: {
                id: Date.now().toString(),
                url: 'https://example.com/photo.jpg',
                name: file.name,
                size: file.size
            }
        };
    },

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    async simulateAPICall(endpoint, data) {
        console.log(`üåê API –≤—ã–∑–æ–≤: ${endpoint}`);
        console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', data);
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
        await this.delay(500 + Math.random() * 1000);
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
        return {
            success: true,
            endpoint,
            data,
            timestamp: new Date(),
            token: `demo_token_${Date.now()}`
        };
    },

    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    },

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    async fullDemo() {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ SpiceConnect');
        console.log('===========================================');
        
        try {
            // 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            console.log('\n1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
            await this.login();
            
            // 2. –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            console.log('\n2. –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
            const searchResult = await this.searchUsers({
                age_min: 20,
                age_max: 30,
                city: '–ú–æ—Å–∫–≤–∞'
            });
            
            // 3. –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            console.log('\n3. –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...');
            await this.loadMessages('2');
            
            // 4. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            console.log('\n4. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...');
            await this.sendMessage('2', '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?');
            
            // 5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
            console.log('\n5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è...');
            await this.updateProfile({
                name: '–î–µ–º–æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                description: '–¢–µ—Å—Ç–∏—Ä—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'
            });
            
            // 6. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            console.log('\n6. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏...');
            await this.uploadPhoto();
            
            console.log('\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
            console.log('===========================================');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        }
    },

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö
    help() {
        console.log(`
üéØ SpiceConnect Demo - –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:

üìã –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Ä¢ demo.login(email, password) - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
‚Ä¢ demo.register(userData) - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
‚Ä¢ demo.searchUsers(filters) - –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ demo.loadMessages(userId) - –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ demo.sendMessage(userId, text) - –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ demo.updateProfile(data) - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
‚Ä¢ demo.uploadPhoto(file) - –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏

üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è:
‚Ä¢ demo.fullDemo() - –ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
‚Ä¢ demo.help() - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üìä –î–∞–Ω–Ω—ã–µ:
‚Ä¢ demo.demoUsers - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
‚Ä¢ demo.demoMessages - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
demo.login('user@example.com', 'password123');
demo.searchUsers({ age_min: 25, age_max: 35, city: '–ú–æ—Å–∫–≤–∞' });
demo.sendMessage('2', '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?');
        `);
    }
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏
if (typeof window !== 'undefined') {
    window.demo = SpiceConnectDemo;
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    console.log('üéØ SpiceConnect Demo –∑–∞–≥—Ä—É–∂–µ–Ω!');
    console.log('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ demo.help() –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏');
    console.log('–ò–ª–∏ demo.fullDemo() –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏');
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è Node.js
if (typeof module !== 'undefined' && module.exports) {
    module.exports = SpiceConnectDemo;
} 