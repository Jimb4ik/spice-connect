// –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç Spice API –¥–ª—è –≤—ã—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã 0 –ø—Ä–æ—Ñ–∏–ª–µ–π
const API_KEY = 'YOUR_REAL_API_KEY_HERE'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á
const BASE_URL = 'https://api.jetsetrdv.com';

async function detailedAPITest() {
    console.log('üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó API –û–¢–í–ï–¢–ê');
    console.log('================================');
    
    try {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–ø—Ä–æ—Å–∞
        const tests = [
            { name: '–ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤', force_pays: null },
            { name: 'France (64)', force_pays: 64 },
            { name: 'Spain (28)', force_pays: 28 },
            { name: 'USA (55)', force_pays: 55 }
        ];
        
        for (const test of tests) {
            console.log(`\nüß™ –¢–ï–°–¢: ${test.name}`);
            console.log('-'.repeat(40));
            
            // –°—Ç—Ä–æ–∏–º URL
            let url = `${BASE_URL}/index_api/landing_module/profils_global`;
            const params = new URLSearchParams();
            params.append('api_key', API_KEY);
            
            if (test.force_pays) {
                params.append('force_pays', test.force_pays);
            }
            
            const finalUrl = `${url}?${params.toString()}`;
            console.log('üì° URL:', finalUrl.replace(API_KEY, 'HIDDEN_KEY'));
            
            // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            const auth = `Basic ${Buffer.from(API_KEY + ':').toString('base64')}`;
            console.log('üîë Authorization:', `Basic base64(${API_KEY.substring(0, 4)}...)`);
            
            // –ó–∞–ø—Ä–æ—Å
            const response = await fetch(finalUrl, {
                method: 'POST',
                headers: {
                    'Authorization': auth,
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                }
            });
            
            console.log(`üìä HTTP Status: ${response.status} ${response.statusText}`);
            
            const data = await response.json();
            
            // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞
            console.log('üìã –ê–ù–ê–õ–ò–ó –û–¢–í–ï–¢–ê:');
            console.log(`   ‚Ä¢ success: ${data.success}`);
            console.log(`   ‚Ä¢ total: ${data.total}`);
            console.log(`   ‚Ä¢ profiles length: ${data.profiles ? data.profiles.length : 'undefined'}`);
            
            // –í—Å–µ –∫–ª—é—á–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
            console.log(`   ‚Ä¢ –∫–ª—é—á–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è: ${Object.keys(data).join(', ')}`);
            
            // –ü–æ–∏—Å–∫ –º–∞—Å—Å–∏–≤–æ–≤
            const arrays = [];
            Object.keys(data).forEach(key => {
                if (Array.isArray(data[key])) {
                    arrays.push(`${key}[${data[key].length}]`);
                }
            });
            console.log(`   ‚Ä¢ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã: ${arrays.join(', ') || '–Ω–µ—Ç'}`);
            
            // –ê–Ω–∞–ª–∏–∑ data –æ–±—ä–µ–∫—Ç–∞
            if (data.data && typeof data.data === 'object') {
                console.log(`   ‚Ä¢ data –æ–±—ä–µ–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç: ${Object.keys(data.data).join(', ')}`);
                Object.keys(data.data).forEach(key => {
                    if (Array.isArray(data.data[key])) {
                        console.log(`     - data.${key}: –º–∞—Å—Å–∏–≤ –∏–∑ ${data.data[key].length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
                    }
                });
            }
            
            // –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
            const responseSize = JSON.stringify(data).length;
            console.log(`   ‚Ä¢ —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: ${responseSize} —Å–∏–º–≤–æ–ª–æ–≤`);
            
            // –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π)
            console.log('üìÑ –ü–û–õ–ù–´–ô –û–¢–í–ï–¢ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):');
            console.log(JSON.stringify(data, null, 2).substring(0, 500) + '...');
            
            if (!response.ok) {
                console.log('‚ùå –û–®–ò–ë–ö–ê:', data);
                break;
            }
        }
        
    } catch (error) {
        console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
    }
}

// –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
console.log(`
üìã –ò–ù–°–¢–†–£–ö–¶–ò–Ø:
1. –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_REAL_API_KEY_HERE –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π API –∫–ª—é—á
2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node test-api-detailed.js
3. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

üéØ –¶–ï–õ–¨: –ü–æ–Ω—è—Ç—å –ø–æ—á–µ–º—É success=true –Ω–æ profiles=0
`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–º–µ–Ω–µ–Ω –ª–∏ API –∫–ª—é—á
if (API_KEY === 'YOUR_REAL_API_KEY_HERE') {
    console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_REAL_API_KEY_HERE –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π API –∫–ª—é—á!');
} else {
    detailedAPITest();
} 