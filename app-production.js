// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –¥–ª—è PRODUCTION
const API_CONFIG = {
    BASE_URL: 'https://api.jetsetrdv.com',
    API_KEY: 'YOUR_API_KEY_HERE', // üö® –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –†–ï–ê–õ–¨–ù–´–ô API –ö–õ–Æ–ß
    ENDPOINTS: {
        LOGIN: '/index_api/login',
        REGISTER: '/index_api/subscribe',
        USER: '/index_api/user',
        SEARCH: '/index_api/search',
        SEND_MESSAGE: '/ajax_api/send_message',
        LOAD_MESSAGES: '/ajax_api/load_messages',
        LOAD_CONTACTS: '/ajax_api/load_contacts',
        UPLOAD_PHOTO: '/ajax_api/upload_photo',
        UPDATE_PROFILE: '/index_api/user/modify/informations'
    }
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentUser = null;
let selectedChatUser = null;
let isAuthenticated = false;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    checkAuth();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    document.getElementById('message-input').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            sendMessage();
        }
    });
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function checkAuth() {
    const token = localStorage.getItem('user_token');
    if (token) {
        isAuthenticated = true;
        showMainApp();
    } else {
        showAuthSection();
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–∫—Ü–∏—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function showAuthSection() {
    hideNavbar();
    showSection('auth-section');
}

// –ü–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
function showMainApp() {
    showNavbar();
    showSection('home');
    loadUserProfile();
}

// –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é
function showNavbar() {
    document.querySelector('.navbar').style.display = 'block';
}

function hideNavbar() {
    document.querySelector('.navbar').style.display = 'none';
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Å–µ–∫—Ü–∏—è–º–∏
function showSection(sectionId) {
    // –°–∫—Ä—ã—Ç—å –≤—Å–µ —Å–µ–∫—Ü–∏–∏
    document.querySelectorAll('.section').forEach(section => {
        section.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –Ω—É–∂–Ω—É—é —Å–µ–∫—Ü–∏—é
    const targetSection = document.getElementById(sectionId + '-section') || document.getElementById(sectionId);
    if (targetSection) {
        targetSection.classList.add('active');
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function showAuthTab(tab) {
    // –£–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    
    // –°–∫—Ä—ã—Ç—å –≤—Å–µ —Ñ–æ—Ä–º—ã
    document.querySelectorAll('.auth-form').forEach(form => {
        form.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –Ω—É–∂–Ω—É—é —Ñ–æ—Ä–º—É –∏ –∫–Ω–æ–ø–∫—É
    document.querySelector(`[onclick="showAuthTab('${tab}')"]`).classList.add('active');
    document.getElementById(tab + '-form').classList.add('active');
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
function showLoading() {
    document.getElementById('loading').style.display = 'flex';
}

// –°–∫—Ä—ã—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
function hideLoading() {
    document.getElementById('loading').style.display = 'none';
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    document.getElementById('notifications').appendChild(notification);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        notification.remove();
    }, 3000);
}

// üî• –†–ï–ê–õ–¨–ù–´–ï API –∑–∞–ø—Ä–æ—Å—ã (–≤–º–µ—Å—Ç–æ simulateAPICall)
async function makeAPIRequest(endpoint, method = 'POST', data = null) {
    const url = API_CONFIG.BASE_URL + endpoint;
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    let requestData = {
        api_key: API_CONFIG.API_KEY
    };
    
    if (data) {
        requestData = { ...requestData, ...data };
    }

    const options = {
        method: method,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Authorization': `Basic ${API_CONFIG.API_KEY}:${localStorage.getItem('user_password') || ''}`
        }
    };
    
    if (method === 'GET') {
        const params = new URLSearchParams(requestData);
        const finalUrl = url + '?' + params.toString();
        try {
            const response = await fetch(finalUrl, { 
                method: 'GET',
                headers: {
                    'Authorization': `Basic ${API_CONFIG.API_KEY}:`
                }
            });
            return await response.json();
        } catch (error) {
            console.error('API Error:', error);
            throw error;
        }
    } else {
        // POST –∑–∞–ø—Ä–æ—Å
        const formData = new URLSearchParams();
        Object.keys(requestData).forEach(key => {
            formData.append(key, requestData[key]);
        });
        
        options.body = formData;
        
        try {
            const response = await fetch(url, options);
            return await response.json();
        } catch (error) {
            console.error('API Error:', error);
            throw error;
        }
    }
}

// üîê –†–ï–ê–õ–¨–ù–ê–Ø –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
async function login() {
    const email = document.getElementById('login-email').value;
    const password = document.getElementById('login-password').value;
    
    if (!email || !password) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
        return;
    }
    
    showLoading();
    
    try {
        const response = await makeAPIRequest(API_CONFIG.ENDPOINTS.LOGIN, 'POST', {
            email: email,
            password: password
        });
        
        if (response.statut === 'ok') {
            localStorage.setItem('user_token', response.token || 'logged_in');
            localStorage.setItem('user_email', email);
            localStorage.setItem('user_password', password);
            localStorage.setItem('user_id', response.user_id);
            
            isAuthenticated = true;
            showMainApp();
            showNotification('–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!', 'success');
        } else {
            showNotification(response.message || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', 'error');
        }
    } catch (error) {
        console.error('Login error:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
    } finally {
        hideLoading();
    }
}

// üìù –†–ï–ê–õ–¨–ù–ê–Ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
async function register() {
    const email = document.getElementById('reg-email').value;
    const password = document.getElementById('reg-password').value;
    const age = document.getElementById('reg-age').value;
    const city = document.getElementById('reg-city').value;
    const gender = document.getElementById('reg-gender').value;
    
    if (!email || !password || !age || !city || !gender) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
        return;
    }
    
    if (age < 18) {
        showNotification('–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 18 –ª–µ—Ç', 'error');
        return;
    }
    
    showLoading();
    
    try {
        const response = await makeAPIRequest(API_CONFIG.ENDPOINTS.REGISTER, 'POST', {
            email: email,
            password: password,
            age: age,
            city: city,
            sexe: gender
        });
        
        if (response.statut === 'ok') {
            localStorage.setItem('user_token', response.token || 'registered');
            localStorage.setItem('user_email', email);
            localStorage.setItem('user_password', password);
            localStorage.setItem('user_id', response.user_id);
            
            isAuthenticated = true;
            showMainApp();
            showNotification('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!', 'success');
        } else {
            showNotification(response.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', 'error');
        }
    } catch (error) {
        console.error('Register error:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
    } finally {
        hideLoading();
    }
}

function logout() {
    localStorage.clear();
    isAuthenticated = false;
    currentUser = null;
    showAuthSection();
    showNotification('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', 'info');
}

// üë§ –†–ï–ê–õ–¨–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
async function loadUserProfile() {
    const userId = localStorage.getItem('user_id');
    if (!userId) return;
    
    try {
        const response = await makeAPIRequest(API_CONFIG.ENDPOINTS.USER, 'POST', {
            user_id: userId
        });
        
        if (response.statut === 'ok') {
            currentUser = response.user;
            updateProfileForm();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –ø—Ä–æ—Ñ–∏–ª—è
function updateProfileForm() {
    if (currentUser) {
        document.getElementById('profile-name').value = currentUser.pseudo || '';
        document.getElementById('profile-age').value = currentUser.age || '';
        document.getElementById('profile-city').value = currentUser.ville || '';
        document.getElementById('profile-description').value = currentUser.description || '';
    }
}

// ‚úèÔ∏è –†–ï–ê–õ–¨–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
async function updateProfile() {
    const name = document.getElementById('profile-name').value;
    const age = document.getElementById('profile-age').value;
    const city = document.getElementById('profile-city').value;
    const description = document.getElementById('profile-description').value;
    
    showLoading();
    
    try {
        const response = await makeAPIRequest(API_CONFIG.ENDPOINTS.UPDATE_PROFILE, 'POST', {
            pseudo: name,
            age: age,
            ville: city,
            description: description
        });
        
        if (response.statut === 'ok') {
            showNotification('–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!', 'success');
            currentUser = { ...currentUser, pseudo: name, age, ville: city, description };
        } else {
            showNotification(response.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è', 'error');
        }
    } catch (error) {
        console.error('Update profile error:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
    } finally {
        hideLoading();
    }
}

// üîç –†–ï–ê–õ–¨–ù–´–ô –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function searchUsers() {
    const ageMin = document.getElementById('search-age-min').value;
    const ageMax = document.getElementById('search-age-max').value;
    const gender = document.getElementById('search-gender').value;
    const city = document.getElementById('search-city').value;
    
    showLoading();
    
    try {
        const response = await makeAPIRequest(API_CONFIG.ENDPOINTS.SEARCH, 'POST', {
            age_min: ageMin,
            age_max: ageMax,
            sexe: gender,
            ville: city
        });
        
        if (response.statut === 'ok' && response.users) {
            displaySearchResults(response.users);
        } else {
            displaySearchResults([]);
            showNotification('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'info');
        }
    } catch (error) {
        console.error('Search error:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞', 'error');
        displaySearchResults([]);
    } finally {
        hideLoading();
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
function displaySearchResults(users) {
    const resultsContainer = document.getElementById('search-results');
    resultsContainer.innerHTML = '';
    
    if (users.length === 0) {
        resultsContainer.innerHTML = '<p style="text-align: center; color: #666;">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>';
        return;
    }
    
    users.forEach(user => {
        const userCard = document.createElement('div');
        userCard.className = 'user-card';
        userCard.innerHTML = `
            <div class="user-photo">
                ${user.main_photo ? `<img src="${user.main_photo.sqmiddle}" alt="${user.pseudo}">` : '<i class="fas fa-user"></i>'}
            </div>
            <div class="user-info">
                <h3>${user.pseudo || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</h3>
                <p><i class="fas fa-birthday-cake"></i> ${user.age} –ª–µ—Ç</p>
                <p><i class="fas fa-map-marker-alt"></i> ${user.ville || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                <p>${user.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}</p>
                <div class="user-actions">
                    <button class="btn-secondary" onclick="sendMessageToUser('${user.user_id}')">
                        <i class="fas fa-envelope"></i> –ù–∞–ø–∏—Å–∞—Ç—å
                    </button>
                    <button class="btn-secondary" onclick="likeUser('${user.user_id}')">
                        <i class="fas fa-heart"></i> –õ–∞–π–∫
                    </button>
                </div>
            </div>
        `;
        
        resultsContainer.appendChild(userCard);
    });
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function sendMessageToUser(userId) {
    showSection('messages');
    await loadContacts();
    selectChatUser(userId);
}

// üíï –†–ï–ê–õ–¨–ù–´–ô –ª–∞–π–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function likeUser(userId) {
    try {
        const response = await makeAPIRequest('/ajax_api/setFlash', 'GET', {
            user_id: userId
        });
        
        if (response.statut === 'ok') {
            showNotification('–õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!', 'success');
        } else {
            showNotification(response.message || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∞–π–∫–∞', 'error');
        }
    } catch (error) {
        console.error('Like error:', error);
        showNotification('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∞–π–∫–∞', 'error');
    }
}

// üìã –†–ï–ê–õ–¨–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
async function loadContacts() {
    try {
        const response = await makeAPIRequest(API_CONFIG.ENDPOINTS.LOAD_CONTACTS, 'GET');
        
        if (response.statut === 'ok' && response.contacts) {
            displayContacts(response.contacts);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
function displayContacts(contacts) {
    const contactsList = document.getElementById('contacts-list');
    contactsList.innerHTML = '<h3>–ö–æ–Ω—Ç–∞–∫—Ç—ã</h3>';
    
    contacts.forEach(contact => {
        const contactItem = document.createElement('div');
        contactItem.className = 'contact-item';
        contactItem.onclick = () => selectChatUser(contact.user_id);
        contactItem.innerHTML = `
            <div class="contact-avatar">
                ${contact.pseudo ? contact.pseudo.charAt(0).toUpperCase() : 'U'}
            </div>
            <div class="contact-info">
                <div class="contact-name">${contact.pseudo || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</div>
                <div class="contact-last-message">${contact.last_message || '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π'}</div>
            </div>
        `;
        
        contactsList.appendChild(contactItem);
    });
}

// –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∞—Ç–∞
function selectChatUser(userId) {
    selectedChatUser = userId;
    
    // –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
    document.querySelectorAll('.contact-item').forEach(item => {
        item.classList.remove('active');
    });
    
    // –ù–∞–π—Ç–∏ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
    const selectedContact = document.querySelector(`[onclick*="${userId}"]`);
    if (selectedContact) {
        selectedContact.classList.add('active');
    }
    
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
    loadMessages(userId);
}

// üí¨ –†–ï–ê–õ–¨–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async function loadMessages(userId) {
    try {
        const response = await makeAPIRequest(API_CONFIG.ENDPOINTS.LOAD_MESSAGES, 'GET', {
            user_id: userId
        });
        
        if (response.statut === 'ok' && response.messages) {
            displayMessages(response.messages, response.user_name);
            document.getElementById('chat-user-name').textContent = response.user_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
function displayMessages(messages, userName = '') {
    const chatMessages = document.getElementById('chat-messages');
    chatMessages.innerHTML = '';
    
    const currentUserId = localStorage.getItem('user_id');
    
    messages.forEach(message => {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${message.sender_id === currentUserId ? 'own' : ''}`;
        messageDiv.innerHTML = `
            <div class="message-bubble">
                ${message.message}
            </div>
        `;
        
        chatMessages.appendChild(messageDiv);
    });
    
    // –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç—å –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

// üì§ –†–ï–ê–õ–¨–ù–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendMessage() {
    const messageInput = document.getElementById('message-input');
    const messageText = messageInput.value.trim();
    
    if (!messageText || !selectedChatUser) {
        return;
    }
    
    try {
        const response = await makeAPIRequest(API_CONFIG.ENDPOINTS.SEND_MESSAGE, 'GET', {
            user_id: selectedChatUser,
            message: messageText
        });
        
        if (response.statut === 'ok') {
            // –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
            const chatMessages = document.getElementById('chat-messages');
            const messageDiv = document.createElement('div');
            messageDiv.className = 'message own';
            messageDiv.innerHTML = `
                <div class="message-bubble">
                    ${messageText}
                </div>
            `;
            
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
            
            messageInput.value = '';
            showNotification('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', 'success');
        } else {
            showNotification(response.message || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', 'error');
        }
    } catch (error) {
        console.error('Send message error:', error);
        showNotification('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', 'error');
    }
}

// üì∏ –†–ï–ê–õ–¨–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
async function uploadPhoto() {
    const fileInput = document.getElementById('photo-upload');
    const file = fileInput.files[0];
    
    if (!file) {
        return;
    }
    
    if (!file.type.startsWith('image/')) {
        showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', 'error');
        return;
    }
    
    showLoading();
    
    try {
        const formData = new FormData();
        formData.append('api_key', API_CONFIG.API_KEY);
        formData.append('photo', file);
        
        const response = await fetch(API_CONFIG.BASE_URL + API_CONFIG.ENDPOINTS.UPLOAD_PHOTO, {
            method: 'POST',
            body: formData,
            headers: {
                'Authorization': `Basic ${API_CONFIG.API_KEY}:`
            }
        });
        
        const result = await response.json();
        
        if (result.statut === 'ok') {
            showNotification('–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞!', 'success');
            
            // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é
            const reader = new FileReader();
            reader.onload = function(e) {
                const photoPlaceholder = document.querySelector('.photo-placeholder');
                photoPlaceholder.innerHTML = `<img src="${e.target.result}" style="width: 100%; height: 100%; object-fit: cover; border-radius: 50%;">`;
            };
            reader.readAsDataURL(file);
        } else {
            showNotification(result.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏', 'error');
        }
    } catch (error) {
        console.error('Upload error:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏', 'error');
    } finally {
        hideLoading();
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑–¥–µ–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
document.addEventListener('DOMContentLoaded', function() {
    // –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —Ä–∞–∑–¥–µ–ª —Å–æ–æ–±—â–µ–Ω–∏–π
    const originalShowSection = window.showSection;
    window.showSection = function(sectionId) {
        originalShowSection.call(this, sectionId);
        
        if (sectionId === 'messages' && isAuthenticated) {
            loadContacts();
        }
    };
}); 