// SpiceConnect - –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (Live –≤–µ—Ä—Å–∏—è)

// API Configuration
const API_CONFIG = {
    PROXY_URL: '/api/spice-proxy', // –ù–∞—à–∞ serverless —Ñ—É–Ω–∫—Ü–∏—è
    ENDPOINTS: {
        REGISTER: '/api/v2/register',
        LOGIN: '/api/v2/login', 
        SEARCH_USERS: '/api/v2/users/search',
        GET_PROFILE: '/api/v2/users/profile',
        UPDATE_PROFILE: '/api/v2/users/profile/update',
        SEND_MESSAGE: '/api/v2/messages/send',
        GET_MESSAGES: '/api/v2/messages/get',
        UPLOAD_PHOTO: '/api/v2/users/photo/upload'
    }
};

// Global state
let currentUser = null;
let authToken = null;

// Utility functions
function showLoading(show = true) {
    const loading = document.getElementById('loading');
    loading.style.display = show ? 'flex' : 'none';
}

function showNotification(message, type = 'info') {
    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 20px;
        background: ${type === 'success' ? '#27ae60' : type === 'error' ? '#e74c3c' : '#3498db'};
        color: white;
        border-radius: 8px;
        z-index: 10000;
        animation: slideIn 0.3s ease;
    `;
    
    document.body.appendChild(notification);
    
    // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        notification.style.animation = 'slideOut 0.3s ease';
        setTimeout(() => notification.remove(), 300);
    }, 3000);
}

// API call function - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç serverless —Ñ—É–Ω–∫—Ü–∏—é
async function apiCall(endpoint, method = 'POST', data = null) {
    try {
        showLoading(true);
        
        const response = await fetch(API_CONFIG.PROXY_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                endpoint: endpoint,
                method: method,
                body: data
            })
        });

        const result = await response.json();
        
        if (!response.ok) {
            throw new Error(result.error || '–û—à–∏–±–∫–∞ API');
        }
        
        return result;
        
    } catch (error) {
        console.error('API Error:', error);
        showNotification(`–û—à–∏–±–∫–∞: ${error.message}`, 'error');
        throw error;
    } finally {
        showLoading(false);
    }
}

// Authentication functions
async function login() {
    const email = document.getElementById('login-email').value;
    const password = document.getElementById('login-password').value;

    if (!email || !password) {
        showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
        return;
    }

    try {
        const response = await apiCall(API_CONFIG.ENDPOINTS.LOGIN, 'POST', {
            email: email,
            password: password
        });

        if (response.success) {
            authToken = response.token;
            currentUser = response.user;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            localStorage.setItem('spice_token', authToken);
            localStorage.setItem('spice_user', JSON.stringify(currentUser));
            
            showApp();
            showNotification('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', 'success');
        }
    } catch (error) {
        showNotification('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.', 'error');
    }
}

async function register() {
    const name = document.getElementById('register-name').value;
    const email = document.getElementById('register-email').value;
    const password = document.getElementById('register-password').value;
    const age = document.getElementById('register-age').value;
    const city = document.getElementById('register-city').value;

    if (!name || !email || !password || !age || !city) {
        showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
        return;
    }

    try {
        const response = await apiCall(API_CONFIG.ENDPOINTS.REGISTER, 'POST', {
            name: name,
            email: email,
            password: password,
            age: parseInt(age),
            city: city
        });

        if (response.success) {
            showNotification('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.', 'success');
            showLogin();
        }
    } catch (error) {
        showNotification('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π email.', 'error');
    }
}

function logout() {
    authToken = null;
    currentUser = null;
    localStorage.removeItem('spice_token');
    localStorage.removeItem('spice_user');
    
    document.getElementById('app').style.display = 'none';
    document.getElementById('login-section').style.display = 'block';
    
    showNotification('–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞', 'info');
}

// UI functions
function showLogin() {
    document.getElementById('login-section').style.display = 'block';
    document.getElementById('register-section').style.display = 'none';
}

function showRegister() {
    document.getElementById('login-section').style.display = 'none';
    document.getElementById('register-section').style.display = 'block';
}

function showApp() {
    document.getElementById('login-section').style.display = 'none';
    document.getElementById('register-section').style.display = 'none';
    document.getElementById('app').style.display = 'block';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (currentUser) {
        document.getElementById('user-name').textContent = currentUser.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        document.getElementById('profile-name').textContent = currentUser.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        document.getElementById('profile-details').textContent = 
            `${currentUser.age} –ª–µ—Ç, ${currentUser.city}`;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞
    document.getElementById('nav-logout').style.display = 'block';
}

function showSection(sectionName) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
    const sections = document.querySelectorAll('.section');
    sections.forEach(section => section.classList.remove('active'));
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    const navLinks = document.querySelectorAll('.nav-link');
    navLinks.forEach(link => link.classList.remove('active'));
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–µ–∫—Ü–∏—é
    const targetSection = document.getElementById(sectionName);
    if (targetSection) {
        targetSection.classList.add('active');
    }
    
    // –î–µ–ª–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É
    const activeNavLink = document.getElementById(`nav-${sectionName}`);
    if (activeNavLink) {
        activeNavLink.classList.add('active');
    }
}

// Search functions
async function searchUsers() {
    const ageMin = document.getElementById('search-age-min').value;
    const ageMax = document.getElementById('search-age-max').value;
    const city = document.getElementById('search-city').value;

    try {
        const response = await apiCall(API_CONFIG.ENDPOINTS.SEARCH_USERS, 'POST', {
            age_min: parseInt(ageMin) || 18,
            age_max: parseInt(ageMax) || 100,
            city: city || '',
            limit: 20
        });

        if (response.success && response.users) {
            displaySearchResults(response.users);
        } else {
            showNotification('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'info');
            displaySearchResults([]);
        }
    } catch (error) {
        showNotification('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'error');
        displaySearchResults([]);
    }
}

function displaySearchResults(users) {
    const resultsContainer = document.getElementById('search-results');
    
    if (!users || users.length === 0) {
        resultsContainer.innerHTML = '<p class="no-data">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.</p>';
        return;
    }
    
    const usersHTML = users.map(user => `
        <div class="user-card">
            <div class="user-avatar">
                ${user.photo_url ? 
                    `<img src="${user.photo_url}" alt="${user.name}">` : 
                    `<div class="avatar-placeholder">${user.name.charAt(0)}</div>`
                }
            </div>
            <div class="user-info">
                <h3>${user.name}</h3>
                <p class="user-details">${user.age} –ª–µ—Ç, ${user.city}</p>
                <p class="user-description">${user.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}</p>
                <div class="user-actions">
                    <button class="btn btn-primary" onclick="sendMessage('${user.id}', '${user.name}')">
                        üíå –ù–∞–ø–∏—Å–∞—Ç—å
                    </button>
                    <button class="btn btn-secondary" onclick="likeUser('${user.id}')">
                        ‚ù§Ô∏è –õ–∞–π–∫
                    </button>
                </div>
            </div>
        </div>
    `).join('');
    
    resultsContainer.innerHTML = usersHTML;
}

// Message functions
async function sendMessage(userId, userName) {
    const message = prompt(`–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userName}:`);
    
    if (!message) return;
    
    try {
        const response = await apiCall(API_CONFIG.ENDPOINTS.SEND_MESSAGE, 'POST', {
            recipient_id: userId,
            message: message
        });

        if (response.success) {
            showNotification(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userName}`, 'success');
        }
    } catch (error) {
        showNotification('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', 'error');
    }
}

async function likeUser(userId) {
    try {
        const response = await apiCall('/api/v2/users/like', 'POST', {
            user_id: userId
        });

        if (response.success) {
            showNotification('–õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!', 'success');
        }
    } catch (error) {
        showNotification('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∞–π–∫–∞', 'error');
    }
}

// Profile functions
function editProfile() {
    showNotification('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö', 'info');
}

async function updateProfile() {
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ
    showNotification('–§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info');
}

// Event listeners
document.addEventListener('DOMContentLoaded', function() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const savedToken = localStorage.getItem('spice_token');
    const savedUser = localStorage.getItem('spice_user');
    
    if (savedToken && savedUser) {
        authToken = savedToken;
        currentUser = JSON.parse(savedUser);
        showApp();
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ—Ä–º
    document.getElementById('login-form').addEventListener('submit', function(e) {
        e.preventDefault();
        login();
    });
    
    document.getElementById('register-form').addEventListener('submit', function(e) {
        e.preventDefault();
        register();
    });
    
    // –ú–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é
    const hamburger = document.getElementById('hamburger');
    const navMenu = document.getElementById('navMenu');
    
    if (hamburger && navMenu) {
        hamburger.addEventListener('click', function() {
            navMenu.classList.toggle('active');
        });
    }
    
    console.log('‚úÖ SpiceConnect Live –≤–µ—Ä—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    console.log('üöÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É API Spice');
}); 